apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  annotations:
    description: Requires the use of a read-only root file system by pod containers. Corresponds to the `readOnlyRootFilesystem` field in a PodSecurityPolicy. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
    metadata.gatekeeper.sh/title: Read Only Root Filesystem
    metadata.gatekeeper.sh/version: 1.1.1
  name: k8spspreadonlyrootfilesystem
spec:
  crd:
    spec:
      names:
        kind: K8sPSPReadOnlyRootFilesystem
      validation:
        openAPIV3Schema:
          description: Requires the use of a read-only root file system by pod containers. Corresponds to the `readOnlyRootFilesystem` field in a PodSecurityPolicy. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
          properties:
            exemptImages:
              description: |-
                Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
              items:
                type: string
              type: array
          type: object
  targets:
    - code:
        - engine: K8sNativeValidation
          source:
            validations:
              - expression: (has(request.operation) && request.operation == "UPDATE") || size(variables.badContainers) == 0
                messageExpression: '"only read-only root filesystem container is allowed: " + variables.badContainers.join(", ")'
            variables:
              - expression: 'has(variables.anyObject.spec.containers) ? variables.anyObject.spec.containers : []'
                name: containers
              - expression: 'has(variables.anyObject.spec.initContainers) ? variables.anyObject.spec.initContainers : []'
                name: initContainers
              - expression: 'has(variables.anyObject.spec.ephemeralContainers) ? variables.anyObject.spec.ephemeralContainers : []'
                name: ephemeralContainers
              - expression: |
                  !has(variables.params.exemptImages) ? [] :
                    variables.params.exemptImages.filter(image, image.endsWith("*")).map(image, string(image).replace("*", ""))
                name: exemptImagePrefixes
              - expression: "!has(variables.params.exemptImages) ? [] : \n  variables.params.exemptImages.filter(image, !image.endsWith(\"*\"))\n"
                name: exemptImageExplicit
              - expression: |
                  (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,
                    container.image in variables.exemptImageExplicit ||
                    variables.exemptImagePrefixes.exists(exemption, string(container.image).startsWith(exemption))).map(container, container.image)
                name: exemptImages
              - expression: "(variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,\n  !(container.image in variables.exemptImages) && \n  (!has(container.securityContext) ||\n  !has(container.securityContext.readOnlyRootFilesystem) ||\n  container.securityContext.readOnlyRootFilesystem != true)\n).map(container, container.name)\n"
                name: badContainers
        - engine: Rego
          source:
            libs:
              - |
                package lib.exclude_update

                is_update(review) {
                    review.operation == "UPDATE"
                }
              - |
                package lib.exempt_container

                is_exempt(container) {
                    exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                    img := container.image
                    exemption := exempt_images[_]
                    _matches_exemption(img, exemption)
                }

                _matches_exemption(img, exemption) {
                    not endswith(exemption, "*")
                    exemption == img
                }

                _matches_exemption(img, exemption) {
                    endswith(exemption, "*")
                    prefix := trim_suffix(exemption, "*")
                    startswith(img, prefix)
                }
            rego: |
              package k8spspreadonlyrootfilesystem

              import data.lib.exclude_update.is_update
              import data.lib.exempt_container.is_exempt

              violation[{"msg": msg, "details": {}}] {
                  # spec.containers.readOnlyRootFilesystem field is immutable.
                  not is_update(input.review)

                  c := input_containers[_]
                  not is_exempt(c)
                  input_read_only_root_fs(c)
                  msg := sprintf("only read-only root filesystem container is allowed: %v", [c.name])
              }

              input_read_only_root_fs(c) {
                  not has_field(c, "securityContext")
              }
              input_read_only_root_fs(c) {
                  not c.securityContext.readOnlyRootFilesystem == true
              }

              input_containers[c] {
                  c := input.review.object.spec.containers[_]
              }
              input_containers[c] {
                  c := input.review.object.spec.initContainers[_]
              }
              input_containers[c] {
                  c := input.review.object.spec.ephemeralContainers[_]
              }

              # has_field returns whether an object has a field
              has_field(object, field) = true {
                  object[field]
              }
      target: admission.k8s.gatekeeper.sh
