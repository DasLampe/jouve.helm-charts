apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  annotations:
    description: Controls the `sysctl` profile used by containers. Corresponds to the `allowedUnsafeSysctls` and `forbiddenSysctls` fields in a PodSecurityPolicy. When specified, any sysctl not in the `allowedSysctls` parameter is considered to be forbidden. The `forbiddenSysctls` parameter takes precedence over the `allowedSysctls` parameter. For more information, see https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/
    metadata.gatekeeper.sh/title: Forbidden Sysctls
    metadata.gatekeeper.sh/version: 1.2.0
  name: k8spspforbiddensysctls
spec:
  crd:
    spec:
      names:
        kind: K8sPSPForbiddenSysctls
      validation:
        openAPIV3Schema:
          description: Controls the `sysctl` profile used by containers. Corresponds to the `allowedUnsafeSysctls` and `forbiddenSysctls` fields in a PodSecurityPolicy. When specified, any sysctl not in the `allowedSysctls` parameter is considered to be forbidden. The `forbiddenSysctls` parameter takes precedence over the `allowedSysctls` parameter. For more information, see https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/
          properties:
            allowedSysctls:
              description: An allow-list of sysctls. `*` allows all sysctls not listed in the `forbiddenSysctls` parameter.
              items:
                type: string
              type: array
            forbiddenSysctls:
              description: A disallow-list of sysctls. `*` forbids all sysctls.
              items:
                type: string
              type: array
          type: object
  targets:
    - code:
        - engine: K8sNativeValidation
          source:
            validations:
              - expression: variables.isUpdate || size(variables.violatingSysctls) == 0
                messageExpression: '"The sysctl is not allowed for pod: " + variables.anyObject.metadata.name + ", forbidden: " + variables.params.forbiddenSysctls.join(", ") + ", allowed: " + variables.allowedSysctlsString'
            variables:
              - expression: has(request.operation) && request.operation == "UPDATE"
                name: isUpdate
              - expression: '!has(variables.anyObject.spec.securityContext) ? [] : !has(variables.anyObject.spec.securityContext.sysctls) ? [] : variables.anyObject.spec.securityContext.sysctls'
                name: sysctls
              - expression: |
                  !has(variables.params.allowedSysctls) ? [] : variables.params.allowedSysctls.filter(sysctl, sysctl.endsWith("*")).map(sysctl, string(sysctl).replace("*", ""))
                name: allowedSysctlPrefixes
              - expression: "!has(variables.params.allowedSysctls) ? [] : \n  variables.params.allowedSysctls.filter(sysctl, !sysctl.endsWith(\"*\"))\n"
                name: allowedSysctlExplicit
              - expression: |
                  !has(variables.params.forbiddenSysctls) ? [] : variables.params.forbiddenSysctls.filter(sysctl, sysctl.endsWith("*")).map(sysctl, string(sysctl).replace("*", ""))
                name: forbiddenSysctlPrefixes
              - expression: "!has(variables.params.forbiddenSysctls) ? [] : \n  variables.params.forbiddenSysctls.filter(sysctl, !sysctl.endsWith(\"*\"))\n"
                name: forbiddenSysctlExplicit
              - expression: |
                  !has(variables.params.allowedSysctls) ? "unspecified" : size(variables.params.allowedSysctls) == 0 ? "empty" : variables.params.allowedSysctls.join(", ")
                name: allowedSysctlsString
              - expression: |
                  (variables.sysctls.filter(sysctl,
                    (sysctl.name in variables.forbiddenSysctlExplicit ||
                    variables.forbiddenSysctlPrefixes.exists(fsp, string(sysctl.name).startsWith(fsp))) ||
                    (has(variables.params.allowedSysctls) &&
                    !(sysctl.name in variables.allowedSysctlExplicit) &&
                    !variables.allowedSysctlPrefixes.exists(asp, string(sysctl.name).startsWith(asp)))))
                name: violatingSysctls
        - engine: Rego
          source:
            libs:
              - |
                package lib.exclude_update

                is_update(review) {
                    review.operation == "UPDATE"
                }
            rego: |
              package k8spspforbiddensysctls

              import data.lib.exclude_update.is_update

              # Block if forbidden
              violation[{"msg": msg, "details": {}}] {
                  # spec.securityContext.sysctls field is immutable.
                  not is_update(input.review)

                  sysctl := input.review.object.spec.securityContext.sysctls[_].name
                  forbidden_sysctl(sysctl)
                  msg := sprintf("The sysctl %v is not allowed, pod: %v. Forbidden sysctls: %v", [sysctl, input.review.object.metadata.name, input.parameters.forbiddenSysctls])
              }

              # Block if not explicitly allowed
              violation[{"msg": msg, "details": {}}] {
                  not is_update(input.review)
                  sysctl := input.review.object.spec.securityContext.sysctls[_].name
                  not allowed_sysctl(sysctl)
                  allowmsg := allowed_sysctl_string()
                  msg := sprintf("The sysctl %v is not explicitly allowed, pod: %v. Allowed sysctls: %v", [sysctl, input.review.object.metadata.name, allowmsg])
              }

              # * may be used to forbid all sysctls
              forbidden_sysctl(_) {
                  input.parameters.forbiddenSysctls[_] == "*"
              }

              forbidden_sysctl(sysctl) {
                  input.parameters.forbiddenSysctls[_] == sysctl
              }

              forbidden_sysctl(sysctl) {
                  forbidden := input.parameters.forbiddenSysctls[_]
                  endswith(forbidden, "*")
                  startswith(sysctl, trim_suffix(forbidden, "*"))
              }

              # * may be used to allow all sysctls
              allowed_sysctl(_) {
                  input.parameters.allowedSysctls[_] == "*"
              }

              allowed_sysctl(sysctl) {
                  input.parameters.allowedSysctls[_] == sysctl
              }

              allowed_sysctl(sysctl) {
                  allowed := input.parameters.allowedSysctls[_]
                  endswith(allowed, "*")
                  startswith(sysctl, trim_suffix(allowed, "*"))
              }

              allowed_sysctl(_) {
                  not input.parameters.allowedSysctls
              }
              allowed_sysctl_string() = out {
                  not input.parameters.allowedSysctls
                  out = "unspecified"
              }
              allowed_sysctl_string() = out {
                  out = input.parameters.allowedSysctls
              }
      target: admission.k8s.gatekeeper.sh
