apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  annotations:
    description: Controls the seccomp profile used by containers. Corresponds to the `seccomp.security.alpha.kubernetes.io/allowedProfileNames` annotation on a PodSecurityPolicy. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
    metadata.gatekeeper.sh/title: Seccomp
    metadata.gatekeeper.sh/version: 1.1.0
  name: k8spspseccomp
spec:
  crd:
    spec:
      names:
        kind: K8sPSPSeccomp
      validation:
        openAPIV3Schema:
          description: Controls the seccomp profile used by containers. Corresponds to the `seccomp.security.alpha.kubernetes.io/allowedProfileNames` annotation on a PodSecurityPolicy. For more information, see https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
          properties:
            allowedLocalhostFiles:
              description: |-
                When using securityContext naming scheme for seccomp and including `Localhost` this array holds the allowed profile JSON files.
                Putting a `*` in this array will allows all JSON files to be used.
                This field is required to allow `Localhost` in securityContext as with an empty list it will block.
              items:
                type: string
              type: array
            allowedProfiles:
              description: |-
                An array of allowed profile values for seccomp on Pods/Containers.
                Can use the annotation naming scheme: `runtime/default`, `docker/default`, `unconfined` and/or `localhost/some-profile.json`. The item `localhost/*` will allow any localhost based profile.
                Can also use the securityContext naming scheme: `RuntimeDefault`, `Unconfined` and/or `Localhost`. For securityContext `Localhost`, use the parameter `allowedLocalhostProfiles` to list the allowed profile JSON files.
                The policy code will translate between the two schemes so it is not necessary to use both.
                Putting a `*` in this array allows all Profiles to be used.
                This field is required since with an empty list this policy will block all workloads.
              items:
                type: string
              type: array
            exemptImages:
              description: |-
                Any container that uses an image that matches an entry in this list will be excluded from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.
                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name) in order to avoid unexpectedly exempting images from an untrusted repository.
              items:
                type: string
              type: array
          type: object
  targets:
    - code:
        - engine: K8sNativeValidation
          source:
            validations:
              - expression: size(variables.badContainerProfiles) == 0
                messageExpression: |
                  variables.badContainerProfiles.join(", ")
            variables:
              - expression: 'has(variables.anyObject.spec.containers) ? variables.anyObject.spec.containers : []'
                name: containers
              - expression: 'has(variables.anyObject.spec.initContainers) ? variables.anyObject.spec.initContainers : []'
                name: initContainers
              - expression: 'has(variables.anyObject.spec.ephemeralContainers) ? variables.anyObject.spec.ephemeralContainers : []'
                name: ephemeralContainers
              - expression: |
                  has(variables.params.allowedProfiles) && variables.params.allowedProfiles.exists(profile, profile == "*")
                name: allowAllProfiles
              - expression: |
                  !has(variables.params.exemptImages) ? [] :
                    variables.params.exemptImages.filter(image, image.endsWith("*")).map(image, string(image).replace("*", ""))
                name: exemptImagePrefixes
              - expression: "!has(variables.params.exemptImages) ? [] : \n  variables.params.exemptImages.filter(image, !image.endsWith(\"*\"))\n"
                name: exemptImageExplicit
              - expression: |
                  (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,
                    container.image in variables.exemptImageExplicit ||
                    variables.exemptImagePrefixes.exists(exemption, string(container.image).startsWith(exemption))).map(container, container.image)
                name: exemptImages
              - expression: |
                  (variables.containers + variables.initContainers + variables.ephemeralContainers).filter(container,
                    !variables.allowAllProfiles &&
                    !(container.image in variables.exemptImages))
                name: unverifiedContainers
              - expression: |
                  !has(variables.params.allowedProfiles) ? [] : variables.params.allowedProfiles
                name: inputAllowedProfiles
              - expression: |
                  has(variables.params.allowedLocalhostFiles) ? variables.params.allowedLocalhostFiles : []
                name: allowedLocalhostFiles
              - expression: "(variables.inputAllowedProfiles.filter(profile,\nprofile != \"Localhost\").map(profile, profile == \"Unconfined\" ? \"unconfined\" : profile)) + \n(variables.inputAllowedProfiles.exists(profile, profile == \"RuntimeDefault\") ? [\"runtime/default\", \"docker/default\"] : [])\n"
                name: allowedProfilesTranslation
              - expression: |
                  variables.inputAllowedProfiles.exists(profile, profile == "Localhost")
                name: allowSecurityContextLocalhost
              - expression: |
                  variables.allowSecurityContextLocalhost ? variables.params.allowedLocalhostFiles.map(file, "localhost/" + file) : []
                name: derivedAllowedLocalhostFiles
              - expression: |
                  variables.inputAllowedProfiles.exists(profile, profile == "localhost/*") || variables.derivedAllowedLocalhostFiles.exists(profile, profile == "localhost/*")
                name: localhostWildcardAllowed
              - expression: |
                  (variables.allowedProfilesTranslation + variables.derivedAllowedLocalhostFiles)
                name: allowedProfiles
              - expression: |
                  has(variables.anyObject.spec.securityContext) && has(variables.anyObject.spec.securityContext.seccompProfile)
                name: hasPodSeccomp
              - expression: |
                  has(variables.anyObject.metadata.annotations) && ("seccomp.security.alpha.kubernetes.io/pod" in variables.anyObject.metadata.annotations)
                name: hasPodAnnotations
              - expression: "variables.unverifiedContainers.filter(container, \n  !(has(container.securityContext) && has(container.securityContext.seccompProfile)) && \n  !(has(variables.anyObject.metadata.annotations) && ((\"container.seccomp.security.alpha.kubernetes.io/\" + container.name) in variables.anyObject.metadata.annotations)) && \n  !variables.hasPodSeccomp && \n  variables.hasPodAnnotations \n).map(container, {\n  \"container\" : container.name,\n  \"profile\" : variables.anyObject.metadata.annotations[\"seccomp.security.alpha.kubernetes.io/pod\"],\n  \"file\" : dyn(\"\"),\n  \"location\" : dyn(\"annotation seccomp.security.alpha.kubernetes.io/pod\"),\n})\n"
                name: podAnnotationsProfiles
              - expression: "variables.unverifiedContainers.filter(container, \n  !(has(container.securityContext) && has(container.securityContext.seccompProfile)) && \n  !variables.hasPodSeccomp && \n  has(variables.anyObject.metadata.annotations) && ((\"container.seccomp.security.alpha.kubernetes.io/\" + container.name) in variables.anyObject.metadata.annotations)\n).map(container, {\n  \"container\" : container.name,\n  \"profile\" : variables.anyObject.metadata.annotations[\"container.seccomp.security.alpha.kubernetes.io/\" + container.name],\n  \"file\" : dyn(\"\"),\n  \"location\" : dyn(\"annotation container.seccomp.security.alpha.kubernetes.io/\" + container.name),\n})\n"
                name: containerAnnotationsProfiles
              - expression: |
                  variables.hasPodSeccomp && has(variables.anyObject.spec.securityContext.seccompProfile.localhostProfile) ? variables.anyObject.spec.securityContext.seccompProfile.localhostProfile : ""
                name: podLocalHostProfile
              - expression: "has(variables.hasPodSeccomp) && has(variables.anyObject.spec.securityContext.seccompProfile.type) ? \n  (variables.anyObject.spec.securityContext.seccompProfile.type == \"RuntimeDefault\" ? (\n    variables.allowedProfiles.exists(profile, profile == \"runtime/default\") ? \"runtime/default\" : variables.allowedProfiles.exists(profile, profile == \"docker/default\") ? \"docker/default\" : \"runtime/default\") : \n  variables.anyObject.spec.securityContext.seccompProfile.type == \"Unconfined\" ? \"unconfined\" : variables.anyObject.spec.securityContext.seccompProfile.type == \"Localhost\" ? \"localhost/\" + variables.podLocalHostProfile : \"\")\n  : \"\"\n"
                name: canonicalPodSecurityContextProfile
              - expression: "variables.unverifiedContainers.filter(container, \n  !(has(container.securityContext) && has(container.securityContext.seccompProfile)) && \n  variables.hasPodSeccomp\n).map(container, {\n  \"container\" : container.name,\n  \"profile\" : dyn(variables.canonicalPodSecurityContextProfile),\n  \"file\" : variables.podLocalHostProfile,\n  \"location\" : dyn(\"pod securityContext\"),\n})\n"
                name: podSecurityContextProfiles
              - expression: "variables.unverifiedContainers.filter(container, \n  has(container.securityContext) && has(container.securityContext.seccompProfile)\n).map(container, {\n  \"container\" : container.name,\n  \"profile\" : dyn(has(container.securityContext.seccompProfile.type) ? (container.securityContext.seccompProfile.type == \"RuntimeDefault\" ? (\n    variables.allowedProfiles.exists(profile, profile == \"runtime/default\") ? \"runtime/default\" : variables.allowedProfiles.exists(profile, profile == \"docker/default\") ? \"docker/default\" : \"runtime/default\") : \n  container.securityContext.seccompProfile.type == \"Unconfined\" ? \"unconfined\" : container.securityContext.seccompProfile.type == \"Localhost\" ? \"localhost/\" + container.securityContext.seccompProfile.localhostProfile : \"\")\n  : \"\"),\n  \"file\" : has(container.securityContext.seccompProfile.localhostProfile) ? container.securityContext.seccompProfile.localhostProfile : dyn(\"\"),\n  \"location\" : dyn(\"container securityContext\"),\n})\n"
                name: containerSecurityContextProfiles
              - expression: "variables.unverifiedContainers.filter(container, \n  !(has(container.securityContext) && has(container.securityContext.seccompProfile)) && \n  !(has(variables.anyObject.metadata.annotations) && ((\"container.seccomp.security.alpha.kubernetes.io/\" + container.name) in variables.anyObject.metadata.annotations)) && \n  !variables.hasPodSeccomp && \n  !variables.hasPodAnnotations \n).map(container, {\n  \"container\" : container.name,\n  \"profile\" : dyn(\"not configured\"),\n  \"file\" : dyn(\"\"),\n  \"location\" : dyn(\"no explicit profile found\"),\n})\n"
                name: containerProfilesMissing
              - expression: |
                  variables.podAnnotationsProfiles + variables.containerAnnotationsProfiles + variables.podSecurityContextProfiles + variables.containerSecurityContextProfiles + variables.containerProfilesMissing
                name: allContainerProfiles
              - expression: |
                  variables.allContainerProfiles.filter(badContainerProfile,
                      !((badContainerProfile.profile in variables.allowedProfiles) || (badContainerProfile.profile.startsWith("localhost/") && variables.localhostWildcardAllowed))
                  ).map(badProfile, "Seccomp profile '" + badProfile.profile + "' is not allowed for container '" + badProfile.container + "'. Found at: " + badProfile.location + ". Allowed profiles: " + variables.allowedProfiles.join(", "))
                name: badContainerProfiles
        - engine: Rego
          source:
            libs:
              - |
                package lib.exempt_container

                is_exempt(container) {
                    exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
                    img := container.image
                    exemption := exempt_images[_]
                    _matches_exemption(img, exemption)
                }

                _matches_exemption(img, exemption) {
                    not endswith(exemption, "*")
                    exemption == img
                }

                _matches_exemption(img, exemption) {
                    endswith(exemption, "*")
                    prefix := trim_suffix(exemption, "*")
                    startswith(img, prefix)
                }
            rego: "package k8spspseccomp\n\nimport data.lib.exempt_container.is_exempt\n\ncontainer_annotation_key_prefix = \"container.seccomp.security.alpha.kubernetes.io/\"\n\npod_annotation_key = \"seccomp.security.alpha.kubernetes.io/pod\"\n\nviolation[{\"msg\": msg}] {\n    not input_wildcard_allowed_profiles\n    allowed_profiles := get_allowed_profiles\n    container := input_containers[name]\n    not is_exempt(container)\n    result := get_profile(container)\n    not allowed_profile(result.profile, result.file, allowed_profiles)\n    msg := get_message(result.profile, result.file, name, result.location, allowed_profiles)\n}\n\nget_message(profile, _, name, location, allowed_profiles) = message {\n    message := sprintf(\"Seccomp profile '%v' is not allowed for container '%v'. Found at: %v. Allowed profiles: %v\", [profile, name, location, allowed_profiles])\n}\n\ninput_wildcard_allowed_profiles {\n    input.parameters.allowedProfiles[_] == \"*\"\n}\n\ninput_wildcard_allowed_files {\n    input.parameters.allowedLocalhostFiles[_] == \"*\"\n}\n\ninput_wildcard_allowed_files {\n    \"localhost/*\" == input.parameters.allowedProfiles[_]\n}\n\n# Simple allowed Profiles\nallowed_profile(profile, _, allowed) {\n    not startswith(profile, \"localhost/\")\n    profile == allowed[_]\n}\n\n# annotation localhost with wildcard\nallowed_profile(profile, _, allowed) {\n    \"localhost/*\" == allowed[_]\n    startswith(profile, \"localhost/\")\n}\n\n# annotation localhost without wildcard\nallowed_profile(profile, _, allowed) {\n    startswith(profile, \"localhost/\")\n    profile == allowed[_]\n}\n\n# The profiles explicitly in the list\nget_allowed_profiles[allowed] {\n    allowed := input.parameters.allowedProfiles[_]\n}\n\n# Seccomp Localhost to annotation translation\nget_allowed_profiles[allowed] {\n    profile := input.parameters.allowedProfiles[_]\n    not contains(profile, \"/\")\n    file := object.get(input.parameters, \"allowedLocalhostFiles\", [])[_]\n    allowed := canonicalize_seccomp_profile({\"type\": profile, \"localhostProfile\": file}, \"\")[_]\n}\n\n# Container profile as defined in pod annotation\nget_profile(container) = {\"profile\": profile, \"file\": \"\", \"location\": location} {\n    not has_securitycontext_container(container)\n    not has_annotation(get_container_annotation_key(container.name))\n    not has_securitycontext_pod\n    profile := input.review.object.metadata.annotations[pod_annotation_key]\n    location := sprintf(\"annotation %v\", [pod_annotation_key])\n}\n\n# Container profile as defined in container annotation\nget_profile(container) = {\"profile\": profile, \"file\": \"\", \"location\": location} {\n    not has_securitycontext_container(container)\n    not has_securitycontext_pod\n    container_annotation := get_container_annotation_key(container.name)\n    has_annotation(container_annotation)\n    profile := input.review.object.metadata.annotations[container_annotation]\n    location := sprintf(\"annotation %v\", [container_annotation])\n}\n\n# Container profile as defined in pods securityContext\nget_profile(container) = {\"profile\": profile, \"file\": file, \"location\": location} {\n    not has_securitycontext_container(container)\n    profile := canonicalize_seccomp_profile(input.review.object.spec.securityContext.seccompProfile, canonicalize_runtime_default_profile)[_]\n    file := object.get(input.review.object.spec.securityContext.seccompProfile, \"localhostProfile\", \"\")\n    location := \"pod securityContext\"\n}\n\n# Container profile as defined in containers securityContext\nget_profile(container) = {\"profile\": profile, \"file\": file, \"location\": location} {\n    has_securitycontext_container(container)\n    profile := canonicalize_seccomp_profile(container.securityContext.seccompProfile, canonicalize_runtime_default_profile)[_]\n    file := object.get(container.securityContext.seccompProfile, \"localhostProfile\", \"\")\n    location := \"container securityContext\"\n}\n\n# Container profile missing\nget_profile(container) = {\"profile\": \"not configured\", \"file\": \"\", \"location\": \"no explicit profile found\"} {\n    not has_securitycontext_container(container)\n    not has_securitycontext_pod\n    not has_annotation(get_container_annotation_key(container.name))\n    not has_annotation(pod_annotation_key)\n}\n\nhas_annotation(annotation) {\n    input.review.object.metadata.annotations[annotation]\n}\n\nhas_securitycontext_pod {\n    input.review.object.spec.securityContext.seccompProfile\n}\n\nhas_securitycontext_container(container) {\n    container.securityContext.seccompProfile\n}\n\nget_container_annotation_key(name) = annotation {\n    annotation := concat(\"\", [container_annotation_key_prefix, name])\n}\n\ninput_containers[container.name] = container {\n    container := input.review.object.spec.containers[_]\n}\n\ninput_containers[container.name] = container {\n    container := input.review.object.spec.initContainers[_]\n}\n\ninput_containers[container.name] = container {\n    container := input.review.object.spec.ephemeralContainers[_]\n}\n\ncanonicalize_runtime_default_profile() = out {\n    \"runtime/default\" == input.parameters.allowedProfiles[_]\n    out := \"runtime/default\"\n} else = out {\n    \"docker/default\" == input.parameters.allowedProfiles[_]\n    out := \"docker/default\"\n} else = out {\n    out := \"runtime/default\"\n}\n\ncanonicalize_seccomp_profile(profile, def) = out {\n    profile.type == \"RuntimeDefault\"\n    def == \"\" \n    out := [\"runtime/default\", \"docker/default\"]\n} else = out {\n    profile.type == \"RuntimeDefault\"\n    def != \"\"\n    out := [def]\n} else = out {\n    profile.type == \"Localhost\"\n    out := [sprintf(\"localhost/%s\", [profile.localhostProfile])]\n} else = out {\n    profile.type == \"Unconfined\"\n    out := [\"unconfined\"]\n} \n"
      target: admission.k8s.gatekeeper.sh
